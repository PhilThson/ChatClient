@page "/login"
@using BlazorServer.Data;
@using BlazorServer.Helpers;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject AuthService AuthService
@inject NavigationManager NavManager
@inject ProtectedSessionStorage SessionStore

<PageTitle>Login</PageTitle>

<div class="container">
    <div class="row">
        <div class="col-md-6">
            <h2>Enter your credentials:</h2>

            @if (!string.IsNullOrEmpty(warningMessage))
            {
                <div class="alert alert-warning">@warningMessage</div>
            }

            <div class="form-group">
                <label for="email">Email:</label>
                <input id="email" type="text" class="form-control" @bind="email" />
            </div>

            <div class="form-group mb-3">
                <label for="password">Password:</label>
                <input id="password" type="password" class="form-control" @bind="password" />
            </div>

            <button @onclick="Authenticate" class="btn btn-primary">Login</button>
        </div>
    </div>
</div>

@code {
    private string email = "";
    private string password = "";
    private string warningMessage = "";

    private async Task Authenticate()
    {
        try
        {
            var loginModel = new LoginModel
            {
                Email = email,
                Password = password
            };

            await AuthService.Authenticate(loginModel);

            NavManager.NavigateTo($"/room");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            warningMessage = ex.Message;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var result = await SessionStore.GetAsync<string>(ChatConstants.WarningMessageName);
        warningMessage = result.Success ? result.Value : "";

        await SessionStore.DeleteAsync(ChatConstants.WarningMessageName);
    }
}