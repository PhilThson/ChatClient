@page "/login"
@using System.Net.Http.Json;
@using BlazorServer.Data;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject NavigationManager NavManager
@inject ProtectedSessionStorage ProtectedSessionStore

<PageTitle>Login</PageTitle>

<div class="container">
    <div class="row">
        <div class="col-md-6 offset-md-3">
            <h2>Enter your credentials:</h2>

            @if (!string.IsNullOrEmpty(warningMessage))
            {
                <div class="alert alert-warning">@warningMessage</div>
            }

            <div class="form-group">
                <label for="email">Email:</label>
                <input id="email" type="text" class="form-control" @bind="email" />
            </div>

            <div class="form-group mb-3">
                <label for="password">Password:</label>
                <input id="password" type="password" class="form-control" @bind="password" />
            </div>

            <button @onclick="Authenticate" class="btn btn-primary">Login</button>
        </div>
    </div>
</div>

@code {
    private string? email;
    private string? password;
    private string warningMessage = "";
    private HttpClient? _httpClient;
    protected HttpClient HttpClient =>
        _httpClient ??= new HttpClient();

    private async Task Authenticate()
    {
        try
        {
            var loginModel = new LoginModel
            {
                Email = email,
                Password = password
            };

            var response = await HttpClient.PostAsJsonAsync("https://localhost:7178/authenticate", loginModel);
            response.EnsureSuccessStatusCode();
            var content = await response.Content.ReadFromJsonAsync<AuthResponse>();

            await ProtectedSessionStore.SetAsync("jwtToken", content?.JwtToken);
            await ProtectedSessionStore.SetAsync("refreshToken", content?.RefreshToken);

            NavManager.NavigateTo($"/room");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var result = await ProtectedSessionStore.GetAsync<string>("warningMessage");
        warningMessage = result.Success ? result.Value : "";

        await ProtectedSessionStore.DeleteAsync("warningMessage");
    }
}