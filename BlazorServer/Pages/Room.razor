@page "/room"
@using Microsoft.AspNetCore.SignalR.Client
@using BlazorServer.Data;
@using Microsoft.AspNetCore.WebUtilities;
@inject NavigationManager NavManager
@implements IAsyncDisposable

<PageTitle>Room</PageTitle>

<div class="form-group">
    <label>
        User: <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message: <input @bind="messageInput" />
    </label>
</div>
@*jeżeli nie ma podłączenia do huba to nie można wysłać formularza*@
<button @onclick="Send" disabled="@(IsConnected == false)">Send</button>

<hr />

<ul>
    @foreach (string message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new();
    private string? userInput;
    private string? messageInput;
    private string? token;

    protected override async Task OnInitializedAsync()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);

        if (!QueryHelpers.ParseQuery(uri.Query).TryGetValue("token", out var tokenValue))
            throw new Exception("Brak tokenu autoryzacyjnego");

        token = tokenValue.First();

        hubConnection = new HubConnectionBuilder()
        // NavManager wie pod jakim linkiem jesteśmy więc poprawnie doda sciezke
        //.WithUrl(NavManager.ToAbsoluteUri("/chathub"))
        .WithUrl("https://localhost:7027/chathub", options =>
        {
            options.AccessTokenProvider = () => Task.FromResult(token);
        })
        .WithAutomaticReconnect()
        .Build();

        hubConnection.On<MessageDto>("ReceiveMessage", (message) =>
        {
            messages.Add($"{message.Username}: {message.Message}");
            InvokeAsync(StateHasChanged);
        });

        //rozpoczecie polaczenia
        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage",
                new MessageDto
                {
                    RoomId = 1,
                    Username = userInput,
                    Message = messageInput
                });
        }
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}